// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: grpc/proto/dataService.proto

package CsvDataService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CsvDataService_GetItems_FullMethodName = "/CSV.Data.Service.csvDataService/GetItems"
)

// CsvDataServiceClient is the client API for CsvDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CsvDataServiceClient interface {
	GetItems(ctx context.Context, in *GetItemsRequest, opts ...grpc.CallOption) (*GetItemsResponse, error)
}

type csvDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCsvDataServiceClient(cc grpc.ClientConnInterface) CsvDataServiceClient {
	return &csvDataServiceClient{cc}
}

func (c *csvDataServiceClient) GetItems(ctx context.Context, in *GetItemsRequest, opts ...grpc.CallOption) (*GetItemsResponse, error) {
	out := new(GetItemsResponse)
	err := c.cc.Invoke(ctx, CsvDataService_GetItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CsvDataServiceServer is the server API for CsvDataService service.
// All implementations must embed UnimplementedCsvDataServiceServer
// for forward compatibility
type CsvDataServiceServer interface {
	GetItems(context.Context, *GetItemsRequest) (*GetItemsResponse, error)
	mustEmbedUnimplementedCsvDataServiceServer()
}

// UnimplementedCsvDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCsvDataServiceServer struct {
}

func (UnimplementedCsvDataServiceServer) GetItems(context.Context, *GetItemsRequest) (*GetItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItems not implemented")
}
func (UnimplementedCsvDataServiceServer) mustEmbedUnimplementedCsvDataServiceServer() {}

// UnsafeCsvDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CsvDataServiceServer will
// result in compilation errors.
type UnsafeCsvDataServiceServer interface {
	mustEmbedUnimplementedCsvDataServiceServer()
}

func RegisterCsvDataServiceServer(s grpc.ServiceRegistrar, srv CsvDataServiceServer) {
	s.RegisterService(&CsvDataService_ServiceDesc, srv)
}

func _CsvDataService_GetItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CsvDataServiceServer).GetItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CsvDataService_GetItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CsvDataServiceServer).GetItems(ctx, req.(*GetItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CsvDataService_ServiceDesc is the grpc.ServiceDesc for CsvDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CsvDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CSV.Data.Service.csvDataService",
	HandlerType: (*CsvDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetItems",
			Handler:    _CsvDataService_GetItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto/dataService.proto",
}
